# Last updated for SwiftLint 0.45.0

disabled_rules:
    # Would be nice to eventually have these enabled so we have more clear and performant code.
    - cyclomatic_complexity
    - function_parameter_count
    - large_tuple
    # Nesting limits will kill us in SwiftUI
    - nesting
    # This is common in SwiftUI
    - multiple_closures_with_trailing_closure

    # These conflict with SwiftFormat so they need to be disabled.
    - closure_parameter_position
    - colon
    - file_length
    - function_body_length
    - line_length
    - opening_brace
    - trailing_comma
    - type_body_length

    # These are just disabled because they do not match our code style.
    - for_where
    - reduce_boolean
    - unused_optional_binding

    # Other
    - notification_center_detachment

excluded:
    - Modules/.build

included:
    - jmespathtool
    - Modules

opt_in_rules:
    - fatal_error_message
    - overridden_super_call
    - prohibited_super_call
    - sorted_first_last
    - quick_discouraged_focused_test
    - weak_delegate

## Rule Configuration
class_delegate_protocol: error
fatal_error_message: error # Force a message when using fatalError()
sorted_first_last: warning # max() or min() vs sort().first()
weak_delegate: error

generic_type_name:
    validates_start_with_lowercase: warning
    allowed_symbols: "_"
    min_length: 1
    max_length:
        warning: 100
        error: 120

identifier_name:
    validates_start_with_lowercase: warning # Allow _varName
    allowed_symbols: "_"
    min_length:
        warning: 0
        error: 0
    max_length:
        warning: 100
        error: 120

type_name:
    allowed_symbols: "_"
    validates_start_with_lowercase: warning
    min_length:
        warning: 1
        error: 0
    max_length:
        warning: 100
        error: 120

custom_rules:
    custom_prefer_filter_isfalse_over_exclamation:
        name: "Prefer filter(isFalse)"
        regex: 'filter\(\!\)'
        message: "Prefer filter(isFalse) over filter(!)"
        severity: error

    custom_prefer_filter_isfalse_over_exclamation_closure:
        name: "Prefer filter(isFalse)"
        regex: '\.filter\s+\{\s+!\$0\s+\}'
        message: "Prefer filter(isFalse) over filter { !$0 }"
        severity: error

    custom_prefer_filter_istrue:
        name: "Prefer filter(isTrue)"
        regex: '\.filter\s+\{\s+\$0\s+\}'
        message: "Prefer filter(isTrue) over filter { $0 }"
        severity: error

#    custom_prefer_isnotempty:
#        name: "Prefer val.isNotEmpty"
#        regex: '\![\S\.]+\.isEmpty'
#        message: "Prefer value.isNotEmpty to !value.isEmpty"
#        severity: error

    # custom_prefer_string_decoding_data:
    #     name: "Prefer .asUTF8String"
    #     regex: 'String\(data:'
    #     message: "Prefer .asUTF8String over String(data:enc:)"
    #     severity: error

    # custom_prefer_string_decoding_data_2:
    #     name: "Prefer .asUTF8String"
    #     regex: 'String\(decoding:'
    #     message: "Prefer .asUTF8String over String(data:enc:)"
    #     severity: error

    # custom_prefer_data_from_string:
    #     name: "Prefer Data(string.encodingType)"
    #     regex: '\.data\(using:\s.utf'
    #     message: "Prefer Data(string.encodingType) over string.data(using:)"
    #     severity: error

    custom_unused_type_cast:
        name: "Unused Type Cast"
        regex: '(let|case)+?\s_\s'
        message: "Use of `let _` or `case _` for type checking can be written with `is` or nil checking"
        severity: error